Index: coregrind/m_replacemalloc/vg_wrap_malloc.c
===================================================================
--- coregrind/m_replacemalloc/vg_wrap_malloc.c	(revision 0)
+++ coregrind/m_replacemalloc/vg_wrap_malloc.c	(working copy)
@@ -0,0 +1,780 @@
+
+/*--------------------------------------------------------------------*/
+/*--- Replacements for malloc() et al, which run on the simulated  ---*/
+/*--- CPU.                                     vg_wrap_malloc.c ---*/
+/*--------------------------------------------------------------------*/
+
+/*
+   This file is part of Valgrind, a dynamic binary instrumentation
+   framework.
+
+   Copyright (C) 2000-2012 Julian Seward 
+      jseward@acm.org
+
+   This program is free software; you can redistribute it and/or
+   modify it under the terms of the GNU General Public License as
+   published by the Free Software Foundation; either version 2 of the
+   License, or (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful, but
+   WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307, USA.
+
+   The GNU General Public License is contained in the file COPYING.
+*/
+
+/* ---------------------------------------------------------------------
+   ALL THE CODE IN THIS FILE RUNS ON THE SIMULATED CPU.  
+   
+   These functions are drop-in replacements for malloc() and friends.
+   They have global scope, but are not intended to be called directly.
+   See pub_core_redir.h for the gory details.
+
+   This file can be linked into the vg_preload_<tool>.so file for any tool
+   that wishes to know about calls to malloc().  The tool must define all
+   the functions that will be called via 'info'.
+
+   It is called vg_wrap_malloc.c because this filename appears in stack
+   traces, so we want the name to be (hopefully!) meaningful to users.
+
+   IMPORTANT: this file must not contain any floating point code, nor
+   any integer division.  This is because on ARM these can cause calls
+   to helper functions, which will be unresolved within this .so.
+   Although it is usually the case that the client's ld.so instance
+   can bind them at runtime to the relevant functions in the client
+   executable, there is no guarantee of this; and so the client may
+   die via a runtime link failure.  Hence the only safe approach is to
+   avoid such function calls in the first place.  See "#define CALLOC"
+   below for a specific example.
+
+   A useful command is
+      for f in `find . -name "*preload*.so*"` ; \
+          do nm -A $f | grep " U " ; \
+      done
+
+   to see all the undefined symbols in all the preload shared objects.
+   ------------------------------------------------------------------ */
+
+#include "pub_core_basics.h"
+#include "pub_core_vki.h"           // VKI_EINVAL, VKI_ENOMEM
+#include "pub_core_clreq.h"         // for VALGRIND_INTERNAL_PRINTF,
+                                    //   VALGRIND_NON_SIMD_CALL[12]
+#include "pub_core_debuginfo.h"     // needed for pub_core_redir.h :(
+#include "pub_core_mallocfree.h"    // for VG_MIN_MALLOC_SZB, VG_AR_CLIENT
+#include "pub_core_redir.h"         // for VG_WRAP_FUNCTION_*
+#include "pub_core_replacemalloc.h"
+
+// The C++ allocators generally call the libc variants, so it is costly to
+// wrap these as well.  If you do want to wrap new/delete, make sure that
+// your callbacks can handle both the new and corresponding malloc() call.
+//#define WRAP_NEW
+
+/* Assignment of behavioural equivalence class tags: 1NNNP is intended
+   to be reserved for the Valgrind core.  Current usage:
+
+   10010 ALLOC_or_NULL
+   10020 ZONEALLOC_or_NULL
+   10030 ALLOC_or_BOMB
+   10040 ZONEFREE
+   10050 FREE
+   10060 ZONECALLOC
+   10070 CALLOC
+   10080 ZONEREALLOC
+   10090 REALLOC
+   10100 ZONEMEMALIGN
+   10110 MEMALIGN
+   10120 VALLOC
+   10130 ZONEVALLOC
+*/
+
+/* 2 Apr 05: the Portland Group compiler, which uses cfront/ARM style
+   mangling, could be supported properly by the redirects in this
+   module.  Except we can't because it doesn't put its allocation
+   functions in libpgc.so but instead hardwires them into the
+   compilation unit holding main(), which makes them impossible to
+   intercept directly.  Fortunately those fns seem to route everything
+   through to malloc/free.
+
+   mid-06: could be improved, since we can now intercept in the main
+   executable too.
+*/
+
+
+
+/* Call here to exit if we can't continue.  On Android we can't call
+   _exit for some reason, so we have to blunt-instrument it. */
+__attribute__ ((__noreturn__))
+static inline void my_exit ( int x )
+{
+#  if defined(VGPV_arm_linux_android)
+   __asm__ __volatile__(".word 0xFFFFFFFF");
+   while (1) {}
+#  elif defined(VGPV_x86_linux_android)
+   __asm__ __volatile__("ud2");
+   while (1) {}
+#  else
+   extern __attribute__ ((__noreturn__)) void _exit(int status);
+   _exit(x);
+#  endif
+}
+
+/* Same problem with getpagesize. */
+static inline int my_getpagesize ( void )
+{
+#  if defined(VGPV_arm_linux_android) || defined(VGPV_x86_linux_android)
+   return 4096; /* kludge - link failure on Android, for some reason */
+#  else
+   extern int getpagesize (void);
+   return getpagesize();
+#  endif
+}
+
+
+/*------------------------------------------------------------*/
+/*--- Wrapping malloc() et al                             ---*/
+/*------------------------------------------------------------*/
+
+/* This struct is initially empty.  Before the first use of any of
+   these functions, we make a client request which fills in the
+   fields. 
+*/
+static struct vg_mallocwrap_info info;
+static int init_done;
+
+/* Startup hook - called as init section */
+__attribute__((constructor))
+static void init(void);
+
+#define MALLOC_TRACE(format, args...)  \
+   if (info.clo_trace_malloc) {        \
+      VALGRIND_INTERNAL_PRINTF(format, ## args ); }
+
+/* Below are new versions of malloc, __builtin_new, free, 
+   __builtin_delete, calloc, realloc, memalign, and friends.
+
+   None of these functions are called directly - they are not meant to
+   be found by the dynamic linker.  But ALL client calls to malloc()
+   and friends wind up here eventually.  They get called because
+   vg_wrap_malloc installs a bunch of code redirects which causes
+   Valgrind to use these functions rather than the ones they're
+   replacing.
+*/
+
+
+/*---------------------- malloc ----------------------*/
+
+#define ALLOC_or_NULL(soname, fnname) \
+   \
+   void* VG_WRAP_FUNCTION_EZU(10010,soname,fnname) (SizeT n); \
+   void* VG_WRAP_FUNCTION_EZU(10010,soname,fnname) (SizeT n)  \
+   { \
+      OrigFn fn; \
+      VALGRIND_GET_ORIG_FN(fn); \
+      void* v; \
+      \
+      if (!init_done) init(); \
+      MALLOC_TRACE(#fnname "(%llu)", (ULong)n ); \
+      \
+      CALL_FN_W_W(v, fn, n); \
+      VALGRIND_NON_SIMD_CALL2( info.tl_malloc, v, n ); \
+      \
+      MALLOC_TRACE(" = %p\n", v ); \
+      return v; \
+   }
+
+#define ZONEALLOC_or_NULL(soname, fnname) \
+   \
+   void* VG_WRAP_FUNCTION_EZU(10020,soname,fnname) (void *zone, SizeT n); \
+   void* VG_WRAP_FUNCTION_EZU(10020,soname,fnname) (void *zone, SizeT n)  \
+   { \
+      OrigFn fn; \
+      VALGRIND_GET_ORIG_FN(fn); \
+      void* v; \
+      \
+      if (!init_done) init(); \
+      MALLOC_TRACE(#fnname "(%p, %llu)", zone, (ULong)n ); \
+      \
+      CALL_FN_W_WW(v, fn, zone, n); \
+      VALGRIND_NON_SIMD_CALL2( info.tl_malloc, v, n ); \
+      \
+      MALLOC_TRACE(" = %p\n", v ); \
+      return v; \
+   }
+
+
+#define ALLOC_or_BOMB(soname, fnname)  \
+   \
+   void* VG_WRAP_FUNCTION_EZU(10030,soname,fnname) (SizeT n); \
+   void* VG_WRAP_FUNCTION_EZU(10030,soname,fnname) (SizeT n)  \
+   { \
+      OrigFn fn; \
+      VALGRIND_GET_ORIG_FN(fn); \
+      void* v; \
+      \
+      if (!init_done) init(); \
+      MALLOC_TRACE(#fnname "(%llu)", (ULong)n );        \
+      \
+      CALL_FN_W_W(v, fn, n); \
+      VALGRIND_NON_SIMD_CALL2( info.tl_malloc, v, n ); \
+      \
+      MALLOC_TRACE(" = %p\n", v ); \
+      if (NULL == v) { \
+         VALGRIND_PRINTF( \
+            "new/new[] failed and should throw an exception, but Valgrind\n"); \
+         VALGRIND_PRINTF_BACKTRACE( \
+            "   cannot throw exceptions and so is aborting instead.  Sorry.\n"); \
+            my_exit(1); \
+      } \
+      return v; \
+   }
+
+// Each of these lines generates a replacement function:
+//     (from_so, from_fn,  v's replacement)
+// For some lines, we will also define a replacement function
+// whose only purpose is to be a soname synonym place holder
+// that can be replaced using --soname-synonyms.
+#define SO_SYN_MALLOC VG_SO_SYN(somalloc)
+
+// malloc
+#if defined(VGO_linux)
+ ALLOC_or_NULL(VG_Z_LIBSTDCXX_SONAME, malloc);
+ ALLOC_or_NULL(VG_Z_LIBC_SONAME,      malloc);
+ ALLOC_or_NULL(SO_SYN_MALLOC,         malloc);
+
+#elif defined(VGO_darwin)
+ ALLOC_or_NULL(VG_Z_LIBC_SONAME,      malloc);
+ ALLOC_or_NULL(SO_SYN_MALLOC,         malloc);
+ ZONEALLOC_or_NULL(VG_Z_LIBC_SONAME,  malloc_zone_malloc);
+ ZONEALLOC_or_NULL(SO_SYN_MALLOC,     malloc_zone_malloc);
+
+#endif
+
+
+/*---------------------- new ----------------------*/
+
+#ifdef WRAP_NEW
+
+#if defined(VGO_linux)
+ // operator new(unsigned int), not mangled (for gcc 2.96)
+ ALLOC_or_BOMB(VG_Z_LIBSTDCXX_SONAME,  builtin_new);
+ ALLOC_or_BOMB(VG_Z_LIBC_SONAME,       builtin_new);
+ ALLOC_or_BOMB(VG_Z_LIBSTDCXX_SONAME,  __builtin_new);
+ ALLOC_or_BOMB(VG_Z_LIBC_SONAME,       __builtin_new);
+ // operator new(unsigned int), GNU mangling
+ #if VG_WORDSIZE == 4
+  ALLOC_or_BOMB(VG_Z_LIBSTDCXX_SONAME, _Znwj);
+  ALLOC_or_BOMB(VG_Z_LIBC_SONAME,      _Znwj);
+  ALLOC_or_BOMB(SO_SYN_MALLOC,         _Znwj);
+ #endif
+ // operator new(unsigned long), GNU mangling
+ #if VG_WORDSIZE == 8
+  ALLOC_or_BOMB(VG_Z_LIBSTDCXX_SONAME, _Znwm);
+  ALLOC_or_BOMB(VG_Z_LIBC_SONAME,      _Znwm);
+  ALLOC_or_BOMB(SO_SYN_MALLOC,         _Znwm);
+ #endif
+
+#elif defined(VGO_darwin)
+ // operator new(unsigned int), GNU mangling
+ #if VG_WORDSIZE == 4
+  //ALLOC_or_BOMB(VG_Z_LIBSTDCXX_SONAME, _Znwj);
+  //ALLOC_or_BOMB(VG_Z_LIBC_SONAME,      _Znwj);
+ #endif
+ // operator new(unsigned long), GNU mangling
+ #if 1 // FIXME: is this right?
+  //ALLOC_or_BOMB(VG_Z_LIBSTDCXX_SONAME, _Znwm);
+  //ALLOC_or_BOMB(VG_Z_LIBC_SONAME,      _Znwm);
+ #endif
+
+#endif
+
+
+/*---------------------- new nothrow ----------------------*/
+
+#if defined(VGO_linux)
+ // operator new(unsigned, std::nothrow_t const&), GNU mangling
+ #if VG_WORDSIZE == 4
+  ALLOC_or_NULL(VG_Z_LIBSTDCXX_SONAME, _ZnwjRKSt9nothrow_t);
+  ALLOC_or_NULL(VG_Z_LIBC_SONAME,      _ZnwjRKSt9nothrow_t);
+  ALLOC_or_NULL(SO_SYN_MALLOC,         _ZnwjRKSt9nothrow_t);
+ #endif
+ // operator new(unsigned long, std::nothrow_t const&), GNU mangling
+ #if VG_WORDSIZE == 8
+  ALLOC_or_NULL(VG_Z_LIBSTDCXX_SONAME, _ZnwmRKSt9nothrow_t);
+  ALLOC_or_NULL(VG_Z_LIBC_SONAME,      _ZnwmRKSt9nothrow_t);
+  ALLOC_or_NULL(SO_SYN_MALLOC,         _ZnwmRKSt9nothrow_t);
+ #endif
+
+#elif defined(VGO_darwin)
+ // operator new(unsigned, std::nothrow_t const&), GNU mangling
+ #if VG_WORDSIZE == 4
+  //ALLOC_or_NULL(VG_Z_LIBSTDCXX_SONAME, _ZnwjRKSt9nothrow_t);
+  //ALLOC_or_NULL(VG_Z_LIBC_SONAME,      _ZnwjRKSt9nothrow_t);
+ #endif
+ // operator new(unsigned long, std::nothrow_t const&), GNU mangling
+ #if 1 // FIXME: is this right?
+  //ALLOC_or_NULL(VG_Z_LIBSTDCXX_SONAME, _ZnwmRKSt9nothrow_t);
+  //ALLOC_or_NULL(VG_Z_LIBC_SONAME,      _ZnwmRKSt9nothrow_t);
+ #endif
+
+#endif
+
+
+/*---------------------- new [] ----------------------*/
+
+#if defined(VGO_linux)
+ // operator new[](unsigned int), not mangled (for gcc 2.96)
+ ALLOC_or_BOMB(VG_Z_LIBSTDCXX_SONAME,  __builtin_vec_new);
+ ALLOC_or_BOMB(VG_Z_LIBC_SONAME,       __builtin_vec_new);
+ // operator new[](unsigned int), GNU mangling
+ #if VG_WORDSIZE == 4
+  ALLOC_or_BOMB(VG_Z_LIBSTDCXX_SONAME, _Znaj);
+  ALLOC_or_BOMB(VG_Z_LIBC_SONAME,      _Znaj);
+  ALLOC_or_BOMB(SO_SYN_MALLOC,         _Znaj);
+ #endif
+ // operator new[](unsigned long), GNU mangling
+ #if VG_WORDSIZE == 8
+  ALLOC_or_BOMB(VG_Z_LIBSTDCXX_SONAME, _Znam);
+  ALLOC_or_BOMB(VG_Z_LIBC_SONAME,      _Znam);
+  ALLOC_or_BOMB(SO_SYN_MALLOC,         _Znam);
+ #endif
+
+#elif defined(VGO_darwin)
+ // operator new[](unsigned int), GNU mangling
+ #if VG_WORDSIZE == 4
+  //ALLOC_or_BOMB(VG_Z_LIBSTDCXX_SONAME, _Znaj);
+  //ALLOC_or_BOMB(VG_Z_LIBC_SONAME,      _Znaj);
+ #endif
+ // operator new[](unsigned long), GNU mangling
+ #if 1 // FIXME: is this right?
+  //ALLOC_or_BOMB(VG_Z_LIBSTDCXX_SONAME, _Znam);
+  //ALLOC_or_BOMB(VG_Z_LIBC_SONAME,      _Znam);
+ #endif
+
+#endif
+
+
+/*---------------------- new [] nothrow ----------------------*/
+
+#if defined(VGO_linux)
+ // operator new[](unsigned, std::nothrow_t const&), GNU mangling
+ #if VG_WORDSIZE == 4
+  ALLOC_or_NULL(VG_Z_LIBSTDCXX_SONAME, _ZnajRKSt9nothrow_t);
+  ALLOC_or_NULL(VG_Z_LIBC_SONAME,      _ZnajRKSt9nothrow_t);
+  ALLOC_or_NULL(SO_SYN_MALLOC,         _ZnajRKSt9nothrow_t);
+ #endif
+ // operator new[](unsigned long, std::nothrow_t const&), GNU mangling
+ #if VG_WORDSIZE == 8
+  ALLOC_or_NULL(VG_Z_LIBSTDCXX_SONAME, _ZnamRKSt9nothrow_t);
+  ALLOC_or_NULL(VG_Z_LIBC_SONAME,      _ZnamRKSt9nothrow_t);
+  ALLOC_or_NULL(SO_SYN_MALLOC,         _ZnamRKSt9nothrow_t);
+ #endif
+
+#elif defined(VGO_darwin)
+ // operator new[](unsigned, std::nothrow_t const&), GNU mangling
+ #if VG_WORDSIZE == 4
+  //ALLOC_or_NULL(VG_Z_LIBSTDCXX_SONAME, _ZnajRKSt9nothrow_t);
+  //ALLOC_or_NULL(VG_Z_LIBC_SONAME,      _ZnajRKSt9nothrow_t);
+ #endif
+ // operator new[](unsigned long, std::nothrow_t const&), GNU mangling
+ #if 1 // FIXME: is this right?
+  //ALLOC_or_NULL(VG_Z_LIBSTDCXX_SONAME, _ZnamRKSt9nothrow_t);
+  //ALLOC_or_NULL(VG_Z_LIBC_SONAME,      _ZnamRKSt9nothrow_t);
+ #endif
+
+#endif
+
+#endif // WRAP_NEW
+
+/*---------------------- free ----------------------*/
+
+/* Generate a replacement for 'fnname' in object 'soname' */
+#define ZONEFREE(soname, fnname) \
+   \
+   void VG_WRAP_FUNCTION_EZU(10040,soname,fnname) (void *zone, void *p); \
+   void VG_WRAP_FUNCTION_EZU(10040,soname,fnname) (void *zone, void *p)  \
+   { \
+      OrigFn fn; \
+      VALGRIND_GET_ORIG_FN(fn); \
+      if (!init_done) init(); \
+      MALLOC_TRACE(#fnname "(%p, %p)\n", zone, p ); \
+      CALL_FN_v_W(fn, p); \
+      VALGRIND_NON_SIMD_CALL1( info.tl_free, p ); \
+   }
+
+#define FREE(soname, fnname) \
+   \
+   void VG_WRAP_FUNCTION_EZU(10050,soname,fnname) (void *p); \
+   void VG_WRAP_FUNCTION_EZU(10050,soname,fnname) (void *p)  \
+   { \
+      OrigFn fn; \
+      VALGRIND_GET_ORIG_FN(fn); \
+      if (!init_done) init(); \
+      MALLOC_TRACE(#fnname "(%p)\n", p ); \
+      CALL_FN_v_W(fn, p); \
+      VALGRIND_NON_SIMD_CALL1( info.tl_free, p ); \
+   }
+
+
+#if defined(VGO_linux)
+ FREE(VG_Z_LIBSTDCXX_SONAME,  free);
+ FREE(VG_Z_LIBC_SONAME,       free);
+ FREE(SO_SYN_MALLOC,          free);
+
+#elif defined(VGO_darwin)
+ FREE(VG_Z_LIBC_SONAME,       free);
+ FREE(SO_SYN_MALLOC,          free);
+ ZONEFREE(VG_Z_LIBC_SONAME,   malloc_zone_free);
+ ZONEFREE(SO_SYN_MALLOC,      malloc_zone_free);
+
+#endif
+
+
+/*---------------------- cfree ----------------------*/
+
+// cfree
+#if defined(VGO_linux)
+ FREE(VG_Z_LIBSTDCXX_SONAME,  cfree);
+ FREE(VG_Z_LIBC_SONAME,       cfree);
+ FREE(SO_SYN_MALLOC,          cfree);
+
+#elif defined(VGO_darwin)
+ //FREE(VG_Z_LIBSTDCXX_SONAME,  cfree);
+ //FREE(VG_Z_LIBC_SONAME,       cfree);
+
+#endif
+
+/*---------------------- delete ----------------------*/
+
+#ifdef WRAP_NEW
+
+#if defined(VGO_linux)
+ // operator delete(void*), not mangled (for gcc 2.96)
+ FREE(VG_Z_LIBSTDCXX_SONAME,   __builtin_delete);
+ FREE(VG_Z_LIBC_SONAME,        __builtin_delete);
+ // operator delete(void*), GNU mangling
+ FREE(VG_Z_LIBSTDCXX_SONAME,  _ZdlPv);
+ FREE(VG_Z_LIBC_SONAME,       _ZdlPv);
+ FREE(SO_SYN_MALLOC,          _ZdlPv);
+
+#elif defined(VGO_darwin)
+ // operator delete(void*), GNU mangling
+ //FREE(VG_Z_LIBSTDCXX_SONAME,  _ZdlPv);
+ //FREE(VG_Z_LIBC_SONAME,       _ZdlPv);
+
+#endif
+
+
+/*---------------------- delete nothrow ----------------------*/
+
+#if defined(VGO_linux)
+ // operator delete(void*, std::nothrow_t const&), GNU mangling
+ FREE(VG_Z_LIBSTDCXX_SONAME, _ZdlPvRKSt9nothrow_t);
+ FREE(VG_Z_LIBC_SONAME,      _ZdlPvRKSt9nothrow_t);
+ FREE(SO_SYN_MALLOC,         _ZdlPvRKSt9nothrow_t);
+
+#elif defined(VGO_darwin)
+ // operator delete(void*, std::nothrow_t const&), GNU mangling
+ //FREE(VG_Z_LIBSTDCXX_SONAME, _ZdlPvRKSt9nothrow_t);
+ //FREE(VG_Z_LIBC_SONAME,      _ZdlPvRKSt9nothrow_t);
+
+#endif
+
+
+/*---------------------- delete [] ----------------------*/
+
+#if defined(VGO_linux)
+ // operator delete[](void*), not mangled (for gcc 2.96)
+ FREE(VG_Z_LIBSTDCXX_SONAME,   __builtin_vec_delete);
+ FREE(VG_Z_LIBC_SONAME,        __builtin_vec_delete);
+ // operator delete[](void*), GNU mangling
+ FREE(VG_Z_LIBSTDCXX_SONAME,  _ZdaPv);
+ FREE(VG_Z_LIBC_SONAME,       _ZdaPv);
+ FREE(SO_SYN_MALLOC,          _ZdaPv);
+
+#elif defined(VGO_darwin)
+ // operator delete[](void*), not mangled (for gcc 2.96)
+ //FREE(VG_Z_LIBSTDCXX_SONAME,   __builtin_vec_delete);
+ //FREE(VG_Z_LIBC_SONAME,        __builtin_vec_delete);
+ // operator delete[](void*), GNU mangling
+ //FREE(VG_Z_LIBSTDCXX_SONAME,  _ZdaPv);
+ //FREE(VG_Z_LIBC_SONAME,       _ZdaPv);
+
+#endif
+
+
+/*---------------------- delete [] nothrow ----------------------*/
+
+#if defined(VGO_linux)
+ // operator delete[](void*, std::nothrow_t const&), GNU mangling
+ FREE(VG_Z_LIBSTDCXX_SONAME,  _ZdaPvRKSt9nothrow_t);
+ FREE(VG_Z_LIBC_SONAME,       _ZdaPvRKSt9nothrow_t);
+ FREE(SO_SYN_MALLOC,          _ZdaPvRKSt9nothrow_t);
+
+#elif defined(VGO_darwin)
+ // operator delete[](void*, std::nothrow_t const&), GNU mangling
+ //FREE(VG_Z_LIBSTDCXX_SONAME,  _ZdaPvRKSt9nothrow_t);
+ //FREE(VG_Z_LIBC_SONAME,       _ZdaPvRKSt9nothrow_t);
+
+#endif
+
+#endif // WRAP_NEW
+
+
+/*---------------------- calloc ----------------------*/
+
+#define ZONECALLOC(soname, fnname) \
+   \
+   void* VG_WRAP_FUNCTION_EZU(10060,soname,fnname) \
+            ( void *zone, SizeT nmemb, SizeT size ); \
+   void* VG_WRAP_FUNCTION_EZU(10060,soname,fnname) \
+            ( void *zone, SizeT nmemb, SizeT size )  \
+   { \
+      OrigFn fn; \
+      VALGRIND_GET_ORIG_FN(fn); \
+      void* v; \
+      \
+      if (!init_done) init(); \
+      MALLOC_TRACE("zone_calloc(%p, %llu,%llu)", zone, (ULong)nmemb, (ULong)size ); \
+      \
+      CALL_FN_W_WW(v, fn, nmemb, size); \
+      VALGRIND_NON_SIMD_CALL2( info.tl_malloc, v, nmemb*size ); \
+      \
+      MALLOC_TRACE(" = %p\n", v ); \
+      return v; \
+   }
+
+#define CALLOC(soname, fnname) \
+   \
+   void* VG_WRAP_FUNCTION_EZU(10070,soname,fnname) \
+            ( SizeT nmemb, SizeT size ); \
+   void* VG_WRAP_FUNCTION_EZU(10070,soname,fnname) \
+            ( SizeT nmemb, SizeT size )  \
+   { \
+      OrigFn fn; \
+      VALGRIND_GET_ORIG_FN(fn); \
+      void* v; \
+      \
+      if (!init_done) init(); \
+      MALLOC_TRACE("calloc(%llu,%llu)", (ULong)nmemb, (ULong)size ); \
+      \
+      CALL_FN_W_WW(v, fn, nmemb, size); \
+      VALGRIND_NON_SIMD_CALL2( info.tl_malloc, v, nmemb*size ); \
+      \
+      MALLOC_TRACE(" = %p\n", v ); \
+      return v; \
+   }
+
+#if defined(VGO_linux)
+ CALLOC(VG_Z_LIBC_SONAME, calloc);
+ CALLOC(SO_SYN_MALLOC,    calloc);
+
+#elif defined(VGO_darwin)
+ CALLOC(VG_Z_LIBC_SONAME, calloc);
+ CALLOC(SO_SYN_MALLOC,    calloc);
+ ZONECALLOC(VG_Z_LIBC_SONAME, malloc_zone_calloc);
+ ZONECALLOC(SO_SYN_MALLOC,    malloc_zone_calloc);
+
+#endif
+
+
+/*---------------------- realloc ----------------------*/
+
+#define ZONEREALLOC(soname, fnname) \
+   \
+   void* VG_WRAP_FUNCTION_EZU(10080,soname,fnname) \
+            ( void *zone, void* ptrV, SizeT new_size ); \
+   void* VG_WRAP_FUNCTION_EZU(10080,soname,fnname) \
+            ( void *zone, void* ptrV, SizeT new_size ) \
+   { \
+      OrigFn fn; \
+      VALGRIND_GET_ORIG_FN(fn); \
+      void* v; \
+      \
+      if (!init_done) init(); \
+      MALLOC_TRACE("zone_realloc(%p,%p,%llu)", zone, ptrV, (ULong)new_size ); \
+      \
+      CALL_FN_W_WWW(v, fn, zone, ptrV, new_size); \
+      VALGRIND_NON_SIMD_CALL3( info.tl_realloc, v, ptrV, new_size ); \
+      \
+      MALLOC_TRACE(" = %p\n", v ); \
+      return v; \
+   }
+
+#define REALLOC(soname, fnname) \
+   \
+   void* VG_WRAP_FUNCTION_EZU(10090,soname,fnname) \
+            ( void* ptrV, SizeT new_size );\
+   void* VG_WRAP_FUNCTION_EZU(10090,soname,fnname) \
+            ( void* ptrV, SizeT new_size ) \
+   { \
+      OrigFn fn; \
+      VALGRIND_GET_ORIG_FN(fn); \
+      void* v; \
+      \
+      if (!init_done) init(); \
+      MALLOC_TRACE("realloc(%p,%llu)", ptrV, (ULong)new_size ); \
+      \
+      CALL_FN_W_WW(v, fn, ptrV, new_size); \
+      VALGRIND_NON_SIMD_CALL3( info.tl_realloc, v, ptrV, new_size ); \
+      \
+      MALLOC_TRACE(" = %p\n", v ); \
+      return v; \
+   }
+
+#if defined(VGO_linux)
+ REALLOC(VG_Z_LIBC_SONAME, realloc);
+ REALLOC(SO_SYN_MALLOC,    realloc);
+
+#elif defined(VGO_darwin)
+ REALLOC(VG_Z_LIBC_SONAME, realloc);
+ REALLOC(SO_SYN_MALLOC,    realloc);
+ ZONEREALLOC(VG_Z_LIBC_SONAME, malloc_zone_realloc);
+ ZONEREALLOC(SO_SYN_MALLOC,    malloc_zone_realloc);
+
+#endif
+
+
+/*---------------------- memalign ----------------------*/
+
+#define ZONEMEMALIGN(soname, fnname) \
+   \
+   void* VG_WRAP_FUNCTION_EZU(10100,soname,fnname) \
+            ( void *zone, SizeT alignment, SizeT n ); \
+   void* VG_WRAP_FUNCTION_EZU(10100,soname,fnname) \
+            ( void *zone, SizeT alignment, SizeT n ) \
+   { \
+      OrigFn fn; \
+      VALGRIND_GET_ORIG_FN(fn); \
+      void* v; \
+      \
+      if (!init_done) init(); \
+      MALLOC_TRACE("zone_memalign(%p, al %llu, size %llu)", \
+                   zone, (ULong)alignment, (ULong)n );  \
+      \
+      CALL_FN_W_WWW(v, fn, zone, alignment, n); \
+      VALGRIND_NON_SIMD_CALL2( info.tl_malloc, v, n ); \
+      \
+      MALLOC_TRACE(" = %p\n", v ); \
+      return v; \
+   }
+
+#define MEMALIGN(soname, fnname) \
+   \
+   void* VG_WRAP_FUNCTION_EZU(10110,soname,fnname) \
+            ( SizeT alignment, SizeT n ); \
+   void* VG_WRAP_FUNCTION_EZU(10110,soname,fnname) \
+            ( SizeT alignment, SizeT n )  \
+   { \
+      OrigFn fn; \
+      VALGRIND_GET_ORIG_FN(fn); \
+      void* v; \
+      \
+      if (!init_done) init(); \
+      MALLOC_TRACE("memalign(al %llu, size %llu)", \
+                   (ULong)alignment, (ULong)n ); \
+      \
+      CALL_FN_W_WW(v, fn, alignment, n); \
+      MALLOC_TRACE("called memalign(al %llu, size %llu)", \
+                   (ULong)alignment, (ULong)n ); \
+      VALGRIND_NON_SIMD_CALL2( info.tl_malloc, v, n ); \
+      \
+      MALLOC_TRACE(" = %p\n", v ); \
+      return v; \
+   }
+
+#if defined(VGO_linux)
+ MEMALIGN(VG_Z_LIBC_SONAME, memalign);
+ MEMALIGN(SO_SYN_MALLOC,    memalign);
+
+#elif defined(VGO_darwin)
+ MEMALIGN(VG_Z_LIBC_SONAME, memalign);
+ MEMALIGN(SO_SYN_MALLOC,    memalign);
+ ZONEMEMALIGN(VG_Z_LIBC_SONAME, malloc_zone_memalign);
+ ZONEMEMALIGN(SO_SYN_MALLOC,    malloc_zone_memalign);
+
+#endif
+
+
+/*---------------------- valloc ----------------------*/
+
+#define VALLOC(soname, fnname) \
+   \
+   void* VG_REPLACE_FUNCTION_EZU(10120,soname,fnname) ( SizeT size ); \
+   void* VG_REPLACE_FUNCTION_EZU(10120,soname,fnname) ( SizeT size ) \
+   { \
+      static int pszB = 0; \
+      if (pszB == 0) \
+         pszB = my_getpagesize(); \
+      return VG_WRAP_FUNCTION_EZU(10110,VG_Z_LIBC_SONAME,memalign) \
+                ((SizeT)pszB, size); \
+   }
+
+#define ZONEVALLOC(soname, fnname) \
+   \
+   void* VG_REPLACE_FUNCTION_EZU(10130,soname,fnname) \
+            ( void *zone, SizeT size ); \
+   void* VG_REPLACE_FUNCTION_EZU(10130,soname,fnname) \
+            ( void *zone, SizeT size )  \
+   { \
+      static int pszB = 0; \
+      if (pszB == 0) \
+         pszB = my_getpagesize(); \
+      return VG_WRAP_FUNCTION_EZU(10110,VG_Z_LIBC_SONAME,memalign) \
+                ((SizeT)pszB, size); \
+   }
+
+#if defined(VGO_linux)
+ VALLOC(VG_Z_LIBC_SONAME, valloc);
+ VALLOC(SO_SYN_MALLOC, valloc);
+
+#elif defined(VGO_darwin)
+ VALLOC(VG_Z_LIBC_SONAME, valloc);
+ VALLOC(SO_SYN_MALLOC, valloc);
+ ZONEVALLOC(VG_Z_LIBC_SONAME, malloc_zone_valloc);
+ ZONEVALLOC(SO_SYN_MALLOC,    malloc_zone_valloc);
+
+#endif
+
+
+
+/*------------------ (startup related) ------------------*/
+
+/* All the code in here is unused until this function is called */
+
+__attribute__((constructor))
+static void init(void)
+{
+   // This doesn't look thread-safe, but it should be ok... Bart says:
+   //   
+   //   Every program I know of calls malloc() at least once before calling
+   //   pthread_create().  So init_done gets initialized before any thread is
+   //   created, and is only read when multiple threads are active
+   //   simultaneously.  Such an access pattern is safe.
+   //
+   //   If the assignment to the variable init_done would be triggering a race
+   //   condition, both DRD and Helgrind would report this race.
+   // 
+   //   By the way, although the init() function in
+   //   coregrind/m_replacemalloc/vg_wrap_malloc.c has been declared
+   //   __attribute__((constructor)), it is not safe to remove the variable
+   //   init_done. This is because it is possible that malloc() and hence
+   //   init() gets called before shared library initialization finished.
+   //
+   if (init_done)
+      return;
+
+   init_done = 1;
+
+   VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__GET_MALLOCWRAPS, &info,
+                                   0, 0, 0, 0);
+}
+
+/*--------------------------------------------------------------------*/
+/*--- end                                                          ---*/
+/*--------------------------------------------------------------------*/
Index: coregrind/pub_core_replacemalloc.h
===================================================================
--- coregrind/pub_core_replacemalloc.h	(revision 13221)
+++ coregrind/pub_core_replacemalloc.h	(working copy)
@@ -54,6 +54,14 @@
    Bool	clo_trace_malloc;
 };
 
+// things vg_wrap_malloc.o needs to know about
+struct vg_mallocwrap_info {
+   void  (*tl_malloc)              (ThreadId tid, void*, SizeT n);
+   void  (*tl_free)                (ThreadId tid, void* p);
+   void  (*tl_realloc)             (ThreadId tid, void* o, void* p, SizeT size);
+   Bool	clo_trace_malloc;
+};
+
 #endif   // __PUB_CORE_REPLACEMALLOC_H
 
 /*--------------------------------------------------------------------*/
Index: coregrind/m_scheduler/scheduler.c
===================================================================
--- coregrind/m_scheduler/scheduler.c	(revision 13221)
+++ coregrind/m_scheduler/scheduler.c	(working copy)
@@ -1809,6 +1809,20 @@
 	 break;
       }
 
+      case VG_USERREQ__GET_MALLOCWRAPS: {
+	 struct vg_mallocwrap_info *info = (struct vg_mallocwrap_info *)arg[1];
+
+	 info->tl_malloc               = VG_(tdict).tool_wrapmalloc;
+	 info->tl_free                 = VG_(tdict).tool_wrapfree;
+	 info->tl_realloc              = VG_(tdict).tool_wraprealloc;
+
+	 info->clo_trace_malloc        = VG_(clo_trace_malloc);
+
+         SET_CLREQ_RETVAL( tid, 0 );     /* return value is meaningless */
+
+	 break;
+      }
+
       /* Requests from the client program */
 
       case VG_USERREQ__DISCARD_TRANSLATIONS:
Index: coregrind/m_tooliface.c
===================================================================
--- coregrind/m_tooliface.c	(revision 13221)
+++ coregrind/m_tooliface.c	(working copy)
@@ -318,6 +318,18 @@
    VG_(tdict).tool_client_redzone_szB   = client_malloc_redzone_szB;
 }
 
+void VG_(needs_malloc_wrap)(
+   void  (*malloc)               ( ThreadId, void*, SizeT ),
+   void  (*free)                 ( ThreadId, void* ),
+   void  (*realloc)              ( ThreadId, void*, void*, SizeT )
+)
+{
+   VG_(needs).malloc_wrap   = True;
+   VG_(tdict).tool_wrapmalloc               = malloc;
+   VG_(tdict).tool_wrapfree                 = free;
+   VG_(tdict).tool_wraprealloc              = realloc;
+}
+
 void VG_(needs_xml_output)( void )
 {
    VG_(needs).xml_output = True;
Index: coregrind/Makefile.am
===================================================================
--- coregrind/Makefile.am	(revision 13221)
+++ coregrind/Makefile.am	(working copy)
@@ -437,6 +437,30 @@
 endif
 
 #----------------------------------------------------------------------------
+# libwrapmalloc_toolpreload-<platform>.a
+#----------------------------------------------------------------------------
+
+pkglib_LIBRARIES += libwrapmalloc_toolpreload-@VGCONF_ARCH_PRI@-@VGCONF_OS@.a
+if VGCONF_HAVE_PLATFORM_SEC
+pkglib_LIBRARIES += libwrapmalloc_toolpreload-@VGCONF_ARCH_SEC@-@VGCONF_OS@.a
+endif
+
+libwrapmalloc_toolpreload_@VGCONF_ARCH_PRI@_@VGCONF_OS@_a_SOURCES = \
+	m_replacemalloc/vg_wrap_malloc.c
+libwrapmalloc_toolpreload_@VGCONF_ARCH_PRI@_@VGCONF_OS@_a_CPPFLAGS = \
+	$(AM_CPPFLAGS_@VGCONF_PLATFORM_PRI_CAPS@)
+libwrapmalloc_toolpreload_@VGCONF_ARCH_PRI@_@VGCONF_OS@_a_CFLAGS = \
+	$(AM_CFLAGS_@VGCONF_PLATFORM_PRI_CAPS@) $(AM_CFLAGS_PIC)
+if VGCONF_HAVE_PLATFORM_SEC
+libwrapmalloc_toolpreload_@VGCONF_ARCH_SEC@_@VGCONF_OS@_a_SOURCES = \
+	m_replacemalloc/vg_wrap_malloc.c
+libwrapmalloc_toolpreload_@VGCONF_ARCH_SEC@_@VGCONF_OS@_a_CPPFLAGS = \
+	$(AM_CPPFLAGS_@VGCONF_PLATFORM_SEC_CAPS@)
+libwrapmalloc_toolpreload_@VGCONF_ARCH_SEC@_@VGCONF_OS@_a_CFLAGS = \
+	$(AM_CFLAGS_@VGCONF_PLATFORM_SEC_CAPS@) $(AM_CFLAGS_PIC)
+endif
+
+#----------------------------------------------------------------------------
 # vgpreload_core-<platform>.a
 #----------------------------------------------------------------------------
 
Index: coregrind/pub_core_tooliface.h
===================================================================
--- coregrind/pub_core_tooliface.h	(revision 13221)
+++ coregrind/pub_core_tooliface.h	(working copy)
@@ -90,6 +90,7 @@
       Bool sanity_checks;
       Bool var_info;
       Bool malloc_replacement;
+      Bool malloc_wrap;
       Bool xml_output;
       Bool final_IR_tidy_pass;
    } 
@@ -159,6 +160,11 @@
    SizeT (*tool_malloc_usable_size)  (ThreadId, void*);
    SizeT tool_client_redzone_szB;
 
+   // VG_(needs).malloc_wrap
+   void (*tool_wrapmalloc)              (ThreadId, void*, SizeT);
+   void (*tool_wrapfree)                (ThreadId, void*);
+   void (*tool_wraprealloc)             (ThreadId, void*, void*, SizeT);
+
    // VG_(needs).final_IR_tidy_pass
    IRSB* (*tool_final_IR_tidy_pass)  (IRSB*);
 
Index: coregrind/pub_core_clreq.h
===================================================================
--- coregrind/pub_core_clreq.h	(revision 13221)
+++ coregrind/pub_core_clreq.h	(working copy)
@@ -46,6 +46,7 @@
 
       /* Get the tool's malloc-wrapping functions */
       VG_USERREQ__GET_MALLOCFUNCS   = 0x3030,
+      VG_USERREQ__GET_MALLOCWRAPS   = 0x3031,
 
       /* Internal equivalent of VALGRIND_PRINTF_VALIST_BY_REF . */
       VG_USERREQ__INTERNAL_PRINTF_VALIST_BY_REF = 0x3103,
Index: Makefile.tool.am
===================================================================
--- Makefile.tool.am	(revision 13221)
+++ Makefile.tool.am	(working copy)
@@ -152,6 +152,74 @@
 	$(LIBREPLACEMALLOC_MIPS32_LINUX) \
 	-Wl,--no-whole-archive
 
+LIBWRAPMALLOC_X86_LINUX = \
+	$(top_builddir)/coregrind/libwrapmalloc_toolpreload-x86-linux.a
+
+LIBWRAPMALLOC_AMD64_LINUX = \
+	$(top_builddir)/coregrind/libwrapmalloc_toolpreload-amd64-linux.a
+
+LIBWRAPMALLOC_PPC32_LINUX = \
+	$(top_builddir)/coregrind/libwrapmalloc_toolpreload-ppc32-linux.a
+
+LIBWRAPMALLOC_PPC64_LINUX = \
+	$(top_builddir)/coregrind/libwrapmalloc_toolpreload-ppc64-linux.a
+
+LIBWRAPMALLOC_ARM_LINUX = \
+	$(top_builddir)/coregrind/libwrapmalloc_toolpreload-arm-linux.a
+
+LIBWRAPMALLOC_X86_DARWIN = \
+	$(top_builddir)/coregrind/libwrapmalloc_toolpreload-x86-darwin.a
+
+LIBWRAPMALLOC_AMD64_DARWIN = \
+	$(top_builddir)/coregrind/libwrapmalloc_toolpreload-amd64-darwin.a
+
+LIBWRAPMALLOC_S390X_LINUX = \
+	$(top_builddir)/coregrind/libwrapmalloc_toolpreload-s390x-linux.a
+
+LIBWRAPMALLOC_MIPS32_LINUX = \
+	$(top_builddir)/coregrind/libwrapmalloc_toolpreload-mips32-linux.a
+
+LIBWRAPMALLOC_LDFLAGS_X86_LINUX = \
+	-Wl,--whole-archive \
+	$(LIBWRAPMALLOC_X86_LINUX) \
+	-Wl,--no-whole-archive
+
+LIBWRAPMALLOC_LDFLAGS_AMD64_LINUX = \
+	-Wl,--whole-archive \
+	$(LIBWRAPMALLOC_AMD64_LINUX) \
+	-Wl,--no-whole-archive
+
+LIBWRAPMALLOC_LDFLAGS_PPC32_LINUX = \
+	-Wl,--whole-archive \
+	$(LIBWRAPMALLOC_PPC32_LINUX) \
+	-Wl,--no-whole-archive
+
+LIBWRAPMALLOC_LDFLAGS_PPC64_LINUX = \
+	-Wl,--whole-archive \
+	$(LIBWRAPMALLOC_PPC64_LINUX) \
+	-Wl,--no-whole-archive
+
+LIBWRAPMALLOC_LDFLAGS_ARM_LINUX = \
+	-Wl,--whole-archive \
+	$(LIBWRAPMALLOC_ARM_LINUX) \
+	-Wl,--no-whole-archive
+
+LIBWRAPMALLOC_LDFLAGS_X86_DARWIN = \
+	$(LIBWRAPMALLOC_X86_DARWIN)
+
+LIBWRAPMALLOC_LDFLAGS_AMD64_DARWIN = \
+	$(LIBWRAPMALLOC_AMD64_DARWIN)
+
+LIBWRAPMALLOC_LDFLAGS_S390X_LINUX = \
+	-Wl,--whole-archive \
+	$(LIBWRAPMALLOC_S390X_LINUX) \
+	-Wl,--no-whole-archive
+
+LIBWRAPMALLOC_LDFLAGS_MIPS32_LINUX = \
+	-Wl,--whole-archive \
+	$(LIBWRAPMALLOC_MIPS32_LINUX) \
+	-Wl,--no-whole-archive
+
 #----------------------------------------------------------------------------
 # General stuff
 #----------------------------------------------------------------------------
Index: include/pub_tool_tooliface.h
===================================================================
--- include/pub_tool_tooliface.h	(revision 13221)
+++ include/pub_tool_tooliface.h	(working copy)
@@ -459,6 +459,12 @@
    SizeT client_malloc_redzone_szB
 );
 
+extern void VG_(needs_malloc_wrap)(
+   void (*pmalloc)  ( ThreadId tid, void* p, SizeT n ),
+   void (*pfree)    ( ThreadId tid, void* p ),
+   void (*prealloc) ( ThreadId tid, void* new_p, void* old_p, SizeT new_size )
+);
+
 /* Can the tool do XML output?  This is a slight misnomer, because the tool
  * is not requesting the core to do anything, rather saying "I can handle
  * it". */
